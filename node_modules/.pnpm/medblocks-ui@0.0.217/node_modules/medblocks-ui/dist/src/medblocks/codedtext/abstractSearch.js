var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html, state, property, query, } from 'lit-element';
import { until } from 'lit-html/directives/until.js';
import { classMap } from 'lit-html/directives/class-map';
import { ifDefined } from 'lit-html/directives/if-defined';
import '@shoelace-style/shoelace/dist/components/spinner/spinner';
import '@shoelace-style/shoelace/dist/components/menu/menu';
import '@shoelace-style/shoelace/dist/components/menu-item/menu-item';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import '@shoelace-style/shoelace/dist/components/tag/tag';
import '@shoelace-style/shoelace/dist/components/icon-button/icon-button';
import '@shoelace-style/shoelace/dist/components/divider/divider';
import '@shoelace-style/shoelace/dist/components/menu-label/menu-label';
import '@shoelace-style/shoelace/dist/components/skeleton/skeleton';
import { CodedTextElement } from './CodedTextElement';
import { event, watch } from '../../internal/decorators';
import './dropdown';
export default class MbSearchAbstract extends CodedTextElement {
    constructor() {
        super(...arguments);
        this._cancelledFilters = [];
        this.mock = [];
        this.debounceInterval = 150;
        this.hits = 10;
        this.placeholder = 'Type to search';
        this.id = 'search';
        this.textFallbackLabel = 'Add custom';
        this.filtersLabel = 'Filters';
        this.errorMessage = 'An unexpected error occurred';
        this.disablefallback = false;
        this.disablesearch = false;
        this.required = false;
        this.hoist = false;
        this.fixfilters = false;
        this.filterType = 'or';
        this._moreHits = 0;
        this._debouncing = false;
    }
    get _maxHits() {
        return this.hits + this._moreHits;
    }
    _searchTermChange() {
        clearTimeout(this._debounceTimeout);
        this._debouncing = true;
        this._debounceTimeout = window.setTimeout(() => {
            this._debouncing = false;
        }, this.debounceInterval);
    }
    _handleInput(e) {
        const inputElement = e.target;
        this.searchTerm = inputElement.value;
        this.dropdown.show();
        this._emitSearchEvent();
    }
    _emitSearchEvent() {
        const searchOptions = {
            maxHits: this._maxHits,
            searchString: this.searchTerm,
            terminology: this.terminology,
            constraints: this._selectedFilters,
        };
        this._mbSearch.emit({ detail: searchOptions });
    }
    get _selectedFilters() {
        var _a, _b;
        const filters = (_b = (_a = this._filters) === null || _a === void 0 ? void 0 : _a.filter(filter => !filter.disabled)) === null || _b === void 0 ? void 0 : _b.map(filter => filter.value);
        return filters;
    }
    get _viewMore() {
        return html ` <div class="more">
      <sl-button
        variant="text"
        @click=${() => {
            this._moreHits += 10;
        }}
        >More</sl-button
      >
      ${this._maxHits > this.hits
            ? html `<sl-button
            variant="text"
            @click=${() => {
                this._moreHits -= 10;
            }}
            >Less</sl-button
          >`
            : null}
    </div>`;
    }
    transformResult(result) {
        return result;
    }
    async getResults() {
        if (this.mock.length) {
            return {
                result: this.mock.map(r => html `<sl-menu-item .value=${{ code: r, value: r }}
              ><p>${r}</p></sl-menu-item
            >`),
            };
        }
        if (!this.searchTerm) {
            return {
                result: [],
            };
        }
        try {
            const result = await this.handleSearch({
                searchString: this.searchTerm,
                terminology: this.terminology,
                constraints: this._selectedFilters,
                maxHits: this._maxHits,
            });
            const results = result.map(r => html `
            <sl-menu-item .value=${r}> ${r.value || r.text} </sl-menu-item>
          `);
            return {
                result: this._maxHits === results.length
                    ? [...results, this._viewMore]
                    : results,
            };
        }
        catch (e) {
            return {
                result: [],
                error: this.errorMessage,
            };
        }
    }
    async _results() {
        if (!this.searchTerm) {
            return;
        }
        if (this._debouncing) {
            return this._loadingResults();
        }
        const { result, error } = await this.getResults();
        if (error) {
            return html `<sl-menu-item disabled>
        <sl-icon
          name="exclamation-triangle"
          slot="prefix"
          library="medblocks"
        ></sl-icon>
        ${error}
      </sl-menu-item>`;
        }
        if (this.searchTerm && result.length === 0) {
            return html `<sl-menu-label>No results</sl-menu-label>`;
        }
        return result;
    }
    _textFallback() {
        return html `<sl-divider></sl-divider>
      <sl-menu-item .value=${{ text: this.searchTerm }}
        ><span slot="suffix" style="font-size: small;"
          >${this.textFallbackLabel}</span
        >${this.searchTerm}</sl-menu-item
      >`;
    }
    _loadingResults() {
        const skeletons = 5;
        return html `${[...Array(skeletons)].map(() => html ` <sl-menu-item disabled class="loading">
        <sl-skeleton effect="sheen"></sl-skeleton>
      </sl-menu-item>`)}`;
    }
    _handleSlSelect(e) {
        const menuItem = e.detail.item;
        this.searchTerm = '';
        if (menuItem.value) {
            return this._handleSelect(menuItem.value, menuItem);
        }
    }
    _handleMouseDown(ev) {
        const path = ev.composedPath();
        if (!path.includes(this) && this.dropdown) {
            this.dropdown.hide();
        }
    }
    connectedCallback() {
        super.connectedCallback();
        const observer = new MutationObserver(() => {
            this._handleChildChange();
        });
        this._handleMouseDown = this._handleMouseDown.bind(this);
        document.addEventListener('mousedown', this._handleMouseDown);
        this.addEventListener('sl-select', this._handleSlSelect);
        observer.observe(this, {
            childList: true,
            subtree: true,
            attributes: true,
        });
    }
    disconnectedCallback() {
        this.removeEventListener('sl-select', this._handleSlSelect);
        document.removeEventListener('mousedown', this._handleMouseDown);
        super.disconnectedCallback();
    }
    _handleChildChange() {
        this._filters = [
            ...this.querySelectorAll('mb-filter'),
        ];
    }
    _handleClear() {
        this.data = undefined;
        this._moreHits = 0;
        this._mbInput.emit();
    }
    _handleFilterClick(tag, tags) {
        if (this.filterType === 'and') {
            for (const t of tags) {
                t.disabled = true;
            }
            tag.disabled = false;
        }
        else {
            tag.disabled = !tag.disabled;
        }
        this._emitSearchEvent();
    }
    reportValidity() {
        var _a, _b;
        const input = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('sl-input');
        if (this.searchTerm) {
            input.setCustomValidity('Please select a value from dropdown');
            return input.reportValidity();
        }
        if (typeof this.data !== 'string' && ((_b = this.data) === null || _b === void 0 ? void 0 : _b.length))
            return true;
        return input.reportValidity();
    }
    _showResults() {
        if (this._hasValue) {
            return false;
        }
        if (this.searchTerm) {
            return true;
        }
        if (this.show) {
            return true;
        }
        return false;
    }
    _searchBar() {
        var _a, _b, _c;
        return html `
      <mb-dropdown
        .containingElement=${this}
        .hoist=${this.hoist}
        .open=${true}
        .focusKeys=${['Enter']}
        .typeToSelect=${false}
        @sl-after-hide=${() => {
            this._cancelledFilters = [];
        }}
      >
        <sl-input
          id=${this.id}
          class=${classMap({ pointer: this._hasValue })}
          slot="trigger"
          ?required=${this.required}
          .size=${this.variant === 'small' ? 'small' : 'medium'}
          .disabled=${this.disabled}
          .label=${this.label || ''}
          @sl-input=${this._handleInput}
          value=${ifDefined((_b = (_a = this._display) !== null && _a !== void 0 ? _a : this.searchTerm) !== null && _b !== void 0 ? _b : '')}
          ?readonly=${this._hasValue}
          ?clearable=${this._hasValue}
          @sl-clear=${this._handleClear}
          placeholder=${this.placeholder}
          autocomplete="off"
        >
          ${this._hasValue
            ? null
            : html `<sl-icon
                library="medblocks"
                name="search"
                slot="prefix"
              ></sl-icon>`}
        </sl-input>
        ${this._showResults()
            ? html `
              <sl-menu style="min-width:300px; width:fit-content;">
                ${this.disablesearch ? null : until(this._results())}
                <slot name="results"></slot>
                ${this.disablefallback ? null : this._textFallback()}
                ${((_c = this._filters) === null || _c === void 0 ? void 0 : _c.length) > 0 && !this.fixfilters
                ? html ` <sl-divider></sl-divider>
                      <sl-menu-label>Filters</sl-menu-label>
                      <div class="tags">
                        ${this._filters.map(f => html `<sl-tag
                              ?removable=${this.filterType === 'or' &&
                    !f.disabled}
                              size=${this.variant === 'small'
                    ? 'small'
                    : 'medium'}
                              variant=${f.disabled ? 'neutral' : 'primary'}
                              @click=${() => this._handleFilterClick(f, this._filters)}
                              >${f.label}</sl-tag
                            >`)}
                      </div>`
                : null}
              </sl-menu>
            `
            : null}
      </mb-dropdown>
      <slot @slotchange=${this._handleChildChange}></slot>
    `;
    }
    get _hasValue() {
        var _a, _b;
        return !!((((_a = this === null || this === void 0 ? void 0 : this.data) === null || _a === void 0 ? void 0 : _a.value) && ((_b = this === null || this === void 0 ? void 0 : this.data) === null || _b === void 0 ? void 0 : _b.code)) ||
            (typeof this.data === 'string' && this.data !== ''));
    }
    get _display() {
        var _a;
        if (typeof this.data === 'string') {
            return this.data;
        }
        return this._hasValue ? (_a = this.data) === null || _a === void 0 ? void 0 : _a.value : undefined;
    }
    get _code() {
        var _a;
        return this._hasValue ? (_a = this.data) === null || _a === void 0 ? void 0 : _a.code : undefined;
    }
}
MbSearchAbstract.styles = css `
    :host,
    mb-dropdown {
      display: block;
    }

    sl-input.pointer::part(base) {
      cursor: default;
    }

    .tags {
      padding: var(--sl-spacing-2x-small) var(--sl-spacing-x-small);
    }

    .more {
      display: flex;
      justify-content: space-between;
      padding: var(--sl-spacing-3x-small) var(--sl-spacing-small);
    }
    .tags sl-tag {
      padding: var(--sl-spacing-2x-small);
    }

    sl-tag::part(base) {
      cursor: pointer;
    }
  `;
__decorate([
    property({ type: String })
], MbSearchAbstract.prototype, "searchTerm", void 0);
__decorate([
    property({ type: Boolean })
], MbSearchAbstract.prototype, "show", void 0);
__decorate([
    property({ type: Array })
], MbSearchAbstract.prototype, "_filters", void 0);
__decorate([
    property({ type: Array })
], MbSearchAbstract.prototype, "_cancelledFilters", void 0);
__decorate([
    property({ type: Array })
], MbSearchAbstract.prototype, "mock", void 0);
__decorate([
    property({ type: Number })
], MbSearchAbstract.prototype, "debounceInterval", void 0);
__decorate([
    property({ type: Number })
], MbSearchAbstract.prototype, "hits", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbSearchAbstract.prototype, "placeholder", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbSearchAbstract.prototype, "id", void 0);
__decorate([
    property({ type: String })
], MbSearchAbstract.prototype, "textFallbackLabel", void 0);
__decorate([
    property({ type: String })
], MbSearchAbstract.prototype, "filtersLabel", void 0);
__decorate([
    property({ type: String })
], MbSearchAbstract.prototype, "errorMessage", void 0);
__decorate([
    property({ type: Boolean })
], MbSearchAbstract.prototype, "disablefallback", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSearchAbstract.prototype, "disablesearch", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSearchAbstract.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSearchAbstract.prototype, "hoist", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSearchAbstract.prototype, "fixfilters", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSearchAbstract.prototype, "disabled", void 0);
__decorate([
    property({ type: String, attribute: 'filter-type', reflect: true })
], MbSearchAbstract.prototype, "filterType", void 0);
__decorate([
    state()
], MbSearchAbstract.prototype, "_moreHits", void 0);
__decorate([
    state()
], MbSearchAbstract.prototype, "_debouncing", void 0);
__decorate([
    state()
], MbSearchAbstract.prototype, "_debounceTimeout", void 0);
__decorate([
    watch('searchTerm')
], MbSearchAbstract.prototype, "_searchTermChange", null);
__decorate([
    event('mb-search')
], MbSearchAbstract.prototype, "_mbSearch", void 0);
__decorate([
    query('mb-dropdown')
], MbSearchAbstract.prototype, "dropdown", void 0);
