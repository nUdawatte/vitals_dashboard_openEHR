import { querySelectorAllDeep, querySelectorDeep, } from 'query-selector-shadow-dom';
import { count, transform, } from '../../../utils';
const storageAPI = {
    upload: async ({ file, axios }) => {
        const form = new FormData();
        form.append('file', file);
        form.append('key', `${Date.now()}-${encodeURIComponent(file.name)}`);
        form.append('type', file.type);
        const response = await axios.post('/api/s3', form, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
        const key = response.data.hashName;
        return key;
    },
    download: async ({ axios, key }) => {
        const response = await axios.get(`/api/s3?object=${key}`);
        return response.data;
    },
};
const storageApiPlugin = {
    storageAPI,
};
function handleMediaPlugin(element) {
    element.base64 = true;
    element.plugin = storageApiPlugin;
}
const healthCareFacilityContextNode = {
    id: '_health_care_facility',
    name: '_health_care_facility',
    rmType: 'PARTY_PROXY',
    min: 1,
    max: 1,
    aqlPath: '/_health_care_facility',
    inputs: [
        {
            suffix: 'id',
            type: 'TEXT',
        },
        {
            suffix: 'id_scheme',
            type: 'TEXT',
        },
        {
            suffix: 'id_namespace',
            type: 'TEXT',
        },
        {
            suffix: 'name',
            type: 'TEXT',
        },
        {
            suffix: 'function',
            type: 'TEXT',
        },
        {
            suffix: 'mode',
            type: 'TEXT',
        },
    ],
    inContext: true,
};
const participationContextNode = {
    id: '_participation',
    name: '_participation',
    rmType: 'PARTY_PROXY',
    min: 1,
    max: 1,
    aqlPath: '/_participation',
    inputs: [
        {
            suffix: 'id',
            type: 'TEXT',
        },
        {
            suffix: 'id_scheme',
            type: 'TEXT',
        },
        {
            suffix: 'id_namespace',
            type: 'TEXT',
        },
        {
            suffix: 'name',
            type: 'TEXT',
        },
    ],
    inContext: true,
};
function removeNElementsFromArray(arr, n) {
    arr.splice(0, n);
    return arr;
}
function encodeText(value) {
    const lt = /</g;
    const gt = />/g;
    const ap = /'/g;
    const ic = /"/g;
    const val = value === null || value === void 0 ? void 0 : value.toString().replace(lt, '&lt;').replace(gt, '&gt;').replace(ap, '&#39;').replace(ic, '&#34;');
    return val;
}
function stripIndex(string) {
    const id = string === null || string === void 0 ? void 0 : string.split(':');
    id.pop();
    const elementId = id.join(':');
    return elementId;
}
const getDepthClass = (depth) => {
    const baseClasses = 'p-depth';
    switch (depth) {
        case 0:
            return `${baseClasses} bg-slate-700`;
        case 1:
            return `${baseClasses} bg-slate-600`;
        case 2:
            return `${baseClasses} bg-slate-500`;
        default:
            return `${baseClasses} bg-slate-400`;
    }
};
function generateNewId(currentId, baseIdPath) {
    const baseIdArray = baseIdPath.split('/').filter(a => a);
    const relativeIdArray = removeNElementsFromArray(currentId.split('/'), baseIdArray.length);
    return [...baseIdArray, ...relativeIdArray].join('/');
}
function createRepeatableElement(path) {
    return `<mb-repeatable-headless path=${stripIndex(path)} count="1" />`;
}
function createContextElement(path) {
    return `<mb-context path=${path} />`;
}
function getDefaultTransform(node, index = 0) {
    var _a;
    const results = transform(node);
    return (_a = results[index]) === null || _a === void 0 ? void 0 : _a.html;
}
function prepareClonedDiv(divId, newId) {
    const referenceId = divId
        .replace(/:\d+/g, ':0')
        .replace(/([!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~])/g, '\\$1');
    const referenceDiv = querySelectorAllDeep(`#${referenceId}`)[0] || null;
    const cloneDiv = referenceDiv.cloneNode(true);
    cloneDiv.classList.remove('hidden', 'reference');
    cloneDiv.id = newId;
    return cloneDiv;
}
function isMultipleInput(element) {
    return (element.tagName === 'MB-INPUT-MULTIPLE' ||
        element.tagName === 'TEXT-SELECT-MULTIPLE');
}
function updateElementPath(element, newId) {
    if (element.isMbElement || element.isRepeatable) {
        element.path = isMultipleInput(element) ? newId.slice(0, -2) : newId;
    }
}
function handlePlugins(element) {
    const plugins = {
        'MB-MULTIMEDIA': () => handleMediaPlugin(element),
    };
    const handler = plugins[element.tagName];
    if (handler)
        handler();
}
function setupButtons(cloneDiv, originalDiv, handleSearch, config) {
    var _a;
    const addButtons = cloneDiv.querySelectorAll('.addButton');
    for (const buttons of addButtons) {
        const parentNode = (_a = buttons === null || buttons === void 0 ? void 0 : buttons.parentNode) === null || _a === void 0 ? void 0 : _a.parentNode;
        addButtonEventListener(buttons, parentNode, handleSearch, config);
    }
    const deleteButtons = cloneDiv === null || cloneDiv === void 0 ? void 0 : cloneDiv.querySelectorAll('.deleteButton');
    const targetDeleteButton = deleteButtons[deleteButtons.length - 1];
    targetDeleteButton.classList.remove('hidden');
    deleteButtonEventListener(targetDeleteButton);
    const currentDivButtons = originalDiv === null || originalDiv === void 0 ? void 0 : originalDiv.querySelectorAll('.divButton');
    const targetDivButton = currentDivButtons[currentDivButtons.length - 1];
    targetDivButton.classList.add('hidden');
}
function processChildDiv(childDiv, baseIdPath, handleSearch) {
    childDiv.classList.remove('reference', 'hidden');
    const newId = generateNewId(childDiv.id, baseIdPath);
    childDiv.id = newId;
    const firstChild = childDiv.children[0];
    if (firstChild) {
        updateElementPath(firstChild, newId);
        if ((firstChild === null || firstChild === void 0 ? void 0 : firstChild.tagName) === 'MB-SEARCH' ||
            (firstChild === null || firstChild === void 0 ? void 0 : firstChild.tagName) === 'MB-SEARCH-MULTIPLE') {
            firstChild.handleSearch = handleSearch;
        }
        handlePlugins(firstChild);
    }
}
function processChildElements(cloneDiv, baseId, handleSearch) {
    const childDivs = cloneDiv.querySelectorAll('div');
    const baseIdPath = `${baseId}/`;
    for (const childDiv of childDivs) {
        processChildDiv(childDiv, baseIdPath, handleSearch);
    }
}
function deleteButtonEventListener(button) {
    button === null || button === void 0 ? void 0 : button.addEventListener('click', e => {
        var _a, _b, _c, _d;
        e.stopPropagation();
        const currentNode = (_a = button.parentNode) === null || _a === void 0 ? void 0 : _a.parentNode;
        const splitArray = (_b = currentNode === null || currentNode === void 0 ? void 0 : currentNode.id) === null || _b === void 0 ? void 0 : _b.split(':');
        const length = splitArray.length - 1;
        splitArray[length] = `${Number(splitArray[length]) - 1}`;
        const divId = splitArray.join(':');
        const children = (_c = currentNode === null || currentNode === void 0 ? void 0 : currentNode.parentNode) === null || _c === void 0 ? void 0 : _c.children;
        const divsWithPrefix = Array.from(children).filter(child => child.tagName.toLowerCase() === 'div' && child.id.startsWith(divId));
        const divButtons = divsWithPrefix[0].querySelectorAll('.divButton');
        const targetDivButton = divButtons[divButtons.length - 1];
        targetDivButton === null || targetDivButton === void 0 ? void 0 : targetDivButton.classList.remove('hidden');
        (_d = currentNode === null || currentNode === void 0 ? void 0 : currentNode.parentNode) === null || _d === void 0 ? void 0 : _d.removeChild(currentNode);
    });
}
function treeChildrenPTag(tree, div, depth) {
    if (tree.rmType !== 'COMPOSITION' &&
        tree.rmType !== 'EVENT_CONTEXT' &&
        tree.rmType !== 'ISM_TRANSITION') {
        div.className = 'heading';
        if (tree.path.split('/').length === 2)
            div.className = `${div.className} margin-bottom-4 `;
        const p = document.createElement('p');
        p.className = getDepthClass(depth);
        p.innerHTML = encodeText(tree.name);
        div === null || div === void 0 ? void 0 : div.appendChild(p);
    }
}
function noChildrenCondition(tree, div, handleSearch, config) {
    var _a;
    if (!tree.mbElement)
        return;
    if (!tree.inContext)
        div.classList.add('leaf-child');
    div.innerHTML = tree.mbElement;
    const innerDiv = div.childNodes[0];
    if ((innerDiv === null || innerDiv === void 0 ? void 0 : innerDiv.tagName) === 'MB-SEARCH' ||
        (innerDiv === null || innerDiv === void 0 ? void 0 : innerDiv.tagName) === 'MB-SEARCH-MULTIPLE') {
        innerDiv.handleSearch = handleSearch;
    }
    if ((innerDiv === null || innerDiv === void 0 ? void 0 : innerDiv.tagName) === 'MB-MULTIMEDIA') {
        handleMediaPlugin(innerDiv);
    }
    if ((innerDiv === null || innerDiv === void 0 ? void 0 : innerDiv.tagName) === 'MB-INPUT' &&
        ((_a = config === null || config === void 0 ? void 0 : config.TEXT_AREA) === null || _a === void 0 ? void 0 : _a.includes(innerDiv.path)))
        innerDiv.textarea = true;
}
function runAddEventListener(div, handleSearch, config) {
    var _a, _b;
    let elementId = stripIndex(div === null || div === void 0 ? void 0 : div.id);
    const children = (_a = div === null || div === void 0 ? void 0 : div.parentNode) === null || _a === void 0 ? void 0 : _a.children;
    const divsWithPrefix = Array.from(children).filter(child => child.tagName.toLowerCase() === 'div' &&
        child.id.startsWith(`${elementId}:`) &&
        child.className !== 'repeatables');
    elementId = `${elementId}:${divsWithPrefix.length}`;
    const cloneDiv = prepareClonedDiv(div.id, elementId);
    processChildElements(cloneDiv, elementId, handleSearch);
    const pTag = cloneDiv.querySelector('p.label');
    const pTagArray = (_b = pTag === null || pTag === void 0 ? void 0 : pTag.textContent) === null || _b === void 0 ? void 0 : _b.split('.');
    pTagArray[0] = `${(divsWithPrefix === null || divsWithPrefix === void 0 ? void 0 : divsWithPrefix.length) + 1}`;
    pTag.textContent = pTagArray.join(' . ');
    setupButtons(cloneDiv, div, handleSearch, config);
    const parentNode = div === null || div === void 0 ? void 0 : div.parentNode;
    parentNode === null || parentNode === void 0 ? void 0 : parentNode.insertBefore(cloneDiv, div.nextSibling);
}
function addMBRepeatables(tree, container) {
    if (!(tree === null || tree === void 0 ? void 0 : tree.path) || !tree.mbElement || !container)
        return;
    const fragment = document.createDocumentFragment();
    const newDiv = document.createElement('div');
    Object.assign(newDiv, {
        className: 'repeatables',
        id: stripIndex(encodeText(tree.path)),
        innerHTML: tree.mbElement,
    });
    fragment === null || fragment === void 0 ? void 0 : fragment.appendChild(newDiv);
    container === null || container === void 0 ? void 0 : container.appendChild(fragment);
}
function createRepeatableButtons(tree, div, handleSearch, config) {
    const addButton = document.createElement('sl-button');
    addButton.innerHTML = `+  ${tree.name}`;
    addButton.size = 'small';
    addButton.className = 'addButton';
    addButton.addEventListener('click', () => {
        runAddEventListener(div, handleSearch, config);
    });
    const deleteButton = document.createElement('sl-button');
    deleteButton.textContent = 'Delete';
    deleteButton.className = 'deleteButton hidden';
    deleteButton.size = 'small';
    deleteButton.variant = 'neutral';
    const divButton = document.createElement('div');
    divButton.className = 'divButton flex justify-end';
    divButton.append(addButton, deleteButton);
    return divButton;
}
function addButtonEventListener(button, div, handleSearch, config) {
    button === null || button === void 0 ? void 0 : button.addEventListener('click', () => {
        runAddEventListener(div, handleSearch, config);
    });
}
function traverse(tree, container, document, reference, handleSearch, config, depth = -1) {
    var _a, _b, _c;
    if (!tree || !document)
        return;
    if (!tree.path || (!((_a = tree.children) === null || _a === void 0 ? void 0 : _a.length) && !tree.mbElement))
        return;
    const fragment = document.createDocumentFragment();
    const div = fragment === null || fragment === void 0 ? void 0 : fragment.appendChild(document.createElement('div'));
    div.id = encodeText(tree.path);
    if (tree.max === -1 && ((_b = tree.children) === null || _b === void 0 ? void 0 : _b.length)) {
        addMBRepeatables(tree, container);
        treeChildrenPTag(tree, div, depth + 1);
        const pTag = div.querySelector('p');
        pTag === null || pTag === void 0 ? void 0 : pTag.classList.add('label');
        const index = div.id.split(':').pop() || 0;
        pTag.innerHTML = `${Number(index) + 1} . ${encodeText(tree.name)}`;
        for (const child of tree.children || []) {
            traverse(child, div, document, reference, handleSearch, config, depth + 1);
        }
        div.append(createRepeatableButtons(tree, div, handleSearch, config));
    }
    else if ((_c = tree.children) === null || _c === void 0 ? void 0 : _c.length) {
        treeChildrenPTag(tree, div, depth + 1);
        for (const child of tree.children || []) {
            traverse(child, div, document, reference, handleSearch, config, depth + 1);
        }
    }
    else
        noChildrenCondition(tree, div, handleSearch, config);
    if (reference)
        div.className = `${encodeText(div.className)} reference hidden`;
    container === null || container === void 0 ? void 0 : container.appendChild(fragment);
}
function handleLeafNode(node) {
    var _a, _b;
    if (node.inContext) {
        node.mbElement = getDefaultTransform(node);
    }
    else if (node.rmType === 'DV_CODED_TEXT') {
        const lists = (_a = node.inputs.find(input => input.suffix === 'code')) === null || _a === void 0 ? void 0 : _a.list;
        if (lists === null || lists === void 0 ? void 0 : lists.length) {
            if (lists.length <= 3)
                node.mbElement = getDefaultTransform(node, 1);
            else
                node.mbElement = getDefaultTransform(node);
        }
        else
            node.mbElement = getDefaultTransform(node, 2);
    }
    else if ((_b = node === null || node === void 0 ? void 0 : node.path) === null || _b === void 0 ? void 0 : _b.endsWith('expiry_time')) {
        node.mbElement = createContextElement(node.path);
    }
    else
        node.mbElement = getDefaultTransform(node);
}
function addIgniteContext(node) {
    var _a, _b, _c;
    const contextNode = (_a = node === null || node === void 0 ? void 0 : node.children) === null || _a === void 0 ? void 0 : _a.find(n => (n === null || n === void 0 ? void 0 : n.id) === 'context');
    (_b = contextNode === null || contextNode === void 0 ? void 0 : contextNode.children) === null || _b === void 0 ? void 0 : _b.push(healthCareFacilityContextNode);
    (_c = contextNode === null || contextNode === void 0 ? void 0 : contextNode.children) === null || _c === void 0 ? void 0 : _c.push(participationContextNode);
    return node;
}
function addPathToChildren(node, parentPath = '') {
    node.path = parentPath === '' ? node === null || node === void 0 ? void 0 : node.id : `${parentPath}/${node === null || node === void 0 ? void 0 : node.id}`;
    if ((node === null || node === void 0 ? void 0 : node.max) === -1)
        node.path += ':0';
    if (node === null || node === void 0 ? void 0 : node.children)
        for (const child of node.children) {
            addPathToChildren(child, `${node === null || node === void 0 ? void 0 : node.path}`);
        }
    return node;
}
function handleNodeWithChildren(node) {
    const children = node.children;
    if (node.max === -1) {
        node.mbElement = createRepeatableElement(node.path);
    }
    for (const child of children) {
        addMbElements(child);
    }
}
function addMbElements(node) {
    var _a;
    if (!node)
        return node;
    if ((_a = node === null || node === void 0 ? void 0 : node.children) === null || _a === void 0 ? void 0 : _a.length) {
        handleNodeWithChildren(node);
    }
    else
        handleLeafNode(node);
    return node;
}
function createAutoFormTree(webTemplate, addContext = false) {
    const baseTree = webTemplate === null || webTemplate === void 0 ? void 0 : webTemplate.tree;
    const treeWithContext = addContext ? addIgniteContext(baseTree) : baseTree;
    const treeWithPaths = addPathToChildren(treeWithContext, '');
    return addMbElements(treeWithPaths);
}
export function createAutoFormByTemplateId(webTemplate, handleSearch, config, addContext = false) {
    const container = querySelectorDeep('#autoForm');
    const newTree = createAutoFormTree(webTemplate, addContext);
    if (container)
        container.innerHTML = '';
    traverse(newTree, container, document, true, handleSearch, config);
    traverse(newTree, container, document, false, handleSearch, config);
}
export function bindRepeatables(mbRepeatables, repeatableArray, formNode, composition, handleSearch, config) {
    var _a;
    for (const repeatable of repeatableArray) {
        const path = repeatable.path;
        const countIndex = count(composition, path);
        const parentNode = (_a = repeatable.parentNode) === null || _a === void 0 ? void 0 : _a.parentNode;
        for (let j = 1; j < countIndex; j++) {
            requestAnimationFrame(() => {
                var _a;
                const divsWithPrefix = Array.from(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children).filter(child => child.tagName.toLowerCase() === 'div' &&
                    child.id.startsWith(path) &&
                    child.className !== 'repeatables');
                const targetDiv = divsWithPrefix[divsWithPrefix.length - 1];
                const addButtons = targetDiv === null || targetDiv === void 0 ? void 0 : targetDiv.querySelectorAll('.addButton');
                const targetAddButton = addButtons === null || addButtons === void 0 ? void 0 : addButtons[(addButtons === null || addButtons === void 0 ? void 0 : addButtons.length) - 1];
                const buttonParentNode = (_a = targetAddButton === null || targetAddButton === void 0 ? void 0 : targetAddButton.parentNode) === null || _a === void 0 ? void 0 : _a.parentNode;
                runAddEventListener(buttonParentNode, handleSearch, config);
            });
        }
    }
    requestAnimationFrame(() => {
        const newMbRepeatables = formNode === null || formNode === void 0 ? void 0 : formNode.querySelectorAll('mb-repeatable-headless');
        const oldMbRepeatables = new Set([...repeatableArray, ...mbRepeatables]);
        const newArray = Array.from(newMbRepeatables || []).filter((item) => !Array.from(oldMbRepeatables).some((ele) => item.path === ele.path));
        if (newArray.length)
            bindRepeatables(Array.from(oldMbRepeatables), newArray, formNode, composition, handleSearch, config);
    });
}
