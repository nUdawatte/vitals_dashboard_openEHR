var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, customElement, html, state } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/button/button';
import '@shoelace-style/shoelace/dist/components/spinner/spinner';
import { property } from 'lit-element';
import { CodedTextElement } from './CodedTextElement';
let CodedTextButtons = class CodedTextButtons extends CodedTextElement {
    constructor() {
        super(...arguments);
        this.required = false;
        this.disabled = false;
        this.multiple = true;
        this.id = 'buttons-multiple';
        this._options = [];
        this.value = {};
    }
    get _optionElements() {
        return this.querySelectorAll('mb-option');
    }
    connectedCallback() {
        super.connectedCallback();
        const observer = new MutationObserver(() => {
            this._handleChildChange();
        });
        observer.observe(this, { childList: true });
        this._handleChildChange();
    }
    _handleChildChange() {
        this._options = [
            ...this.querySelectorAll('mb-option'),
        ];
    }
    reportValidity() {
        var _a;
        const input = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('input');
        return input.reportValidity();
    }
    _handleInput(option) {
        let data = {
            code: option.value,
            value: option.label,
            terminology: this.terminology,
        };
        if (option.ordinal) {
            data = Object.assign(Object.assign({}, data), { ordinal: option.ordinal });
        }
        this.value = data;
        this.addValue();
        this._mbInput.emit();
    }
    valueExists(code) {
        var _a;
        return (_a = this.data) === null || _a === void 0 ? void 0 : _a.some((el) => el.code === code);
    }
    addValue() {
        var _a;
        if (this.data == null)
            this.data = [];
        if (this.valueExists(this.value.code)) {
            this.data = (_a = this.data) === null || _a === void 0 ? void 0 : _a.filter((d) => d.code !== this.value.code);
        }
        else {
            this.data = [...this.data, this.value];
        }
        this.value = {};
        this._mbInput.emit();
    }
    getVariant(option) {
        if (this.valueExists(option.value)) {
            return 'primary';
        }
        if (option.type)
            return option.type;
        return 'default';
    }
    render() {
        var _a;
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <p>
          ${((_a = this.data) === null || _a === void 0 ? void 0 : _a.map((item) => (item === null || item === void 0 ? void 0 : item.value) || '').join(', ')) ||
                ''}
        </p>
      </div>`;
        }
        return html `
      <div style="position:relative;z-index:2" part="base">
        ${this.label
            ? html `<label
              part="label"
              class=${this.variant === 'small' ? 'label-s' : 'label'}
              >${this.label}</label
            >`
            : null}
        <div class="buttons">
          ${this._options.map(option => html ` <sl-button
                id=${`${this.id}-${option.label}`}
                .size=${this.variant === 'small' ? 'small' : 'medium'}
                ?disabled=${this.disabled}
                @click=${() => this._handleInput(option)}
                variant=${this.getVariant(option)}
                >${this.valueExists(option.value)
            ? html `<sl-icon
                      library="medblocks"
                      name="check2"
                      slot="prefix"
                    ></sl-icon>`
            : null}${option.display || option.label}
              </sl-button>`)}
        </div>
        <input
          style="transform:scale(0.025);position:absolute;top:40px;opacity:0.1"
          name="input"
          ?required=${this.required}
        />
      </div>
    `;
    }
};
CodedTextButtons.styles = css `
    .buttons {
      display: flex;
      flex-wrap: wrap;
      gap: var(--sl-spacing-2x-small);
    }

    .label {
      font-size: var(--sl-input-label-font-size-medium);
      display: inline-block;
      color: var(--sl-input-label-color);
      margin-bottom: var(--sl-spacing-3x-small);
    }

    .label-s {
      font-size: var(--sl-input-label-font-size-small);
      display: inline-block;
      color: var(--sl-input-label-color);
      margin-bottom: var(--sl-spacing-3x-small);
    }
  `;
__decorate([
    property({ type: Boolean, reflect: true })
], CodedTextButtons.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], CodedTextButtons.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], CodedTextButtons.prototype, "multiple", void 0);
__decorate([
    property({ type: String, reflect: true })
], CodedTextButtons.prototype, "id", void 0);
__decorate([
    state()
], CodedTextButtons.prototype, "_options", void 0);
__decorate([
    state()
], CodedTextButtons.prototype, "value", void 0);
CodedTextButtons = __decorate([
    customElement('mb-buttons-multiple')
], CodedTextButtons);
export default CodedTextButtons;
