var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, property, css } from 'lit-element';
import { event } from '../../internal/decorators';
import EhrElement from '../EhrElement';
let MbContext = class MbContext extends EhrElement {
    constructor() {
        super(...arguments);
        this.data = undefined;
        this.bind = undefined;
        this.autocontext = true;
    }
    connectedCallback() {
        super.connectedCallback();
        setTimeout(() => {
            this._mbInput.emit();
        }, 50);
    }
};
MbContext.styles = css `
    :host {
      display: none;
    }
  `;
__decorate([
    property({ type: Object })
], MbContext.prototype, "data", void 0);
__decorate([
    property()
], MbContext.prototype, "bind", void 0);
__decorate([
    event('mb-input')
], MbContext.prototype, "_mbInput", void 0);
__decorate([
    property({ type: Boolean })
], MbContext.prototype, "autocontext", void 0);
MbContext = __decorate([
    customElement('mb-context')
], MbContext);
export default MbContext;
