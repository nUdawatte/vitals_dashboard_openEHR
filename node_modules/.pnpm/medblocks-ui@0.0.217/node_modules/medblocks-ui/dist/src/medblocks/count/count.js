var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, html, property } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/input/input';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import { event } from '../../internal/decorators';
import EhrElement from '../EhrElement';
let MbCount = class MbCount extends EhrElement {
    constructor() {
        super(...arguments);
        this.label = '';
        this.placeholder = '';
        this.id = 'count';
        this.required = false;
        this.autocomplete = false;
        this.min = 0;
    }
    handleInput(e) {
        const inputElement = e.target;
        this.data = Number.parseFloat(inputElement.value);
        this._mbInput.emit();
    }
    reportValidity() {
        var _a;
        const input = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('sl-input');
        return input.reportValidity();
    }
    render() {
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <p>${this.data >= Number(this.min || 0) ? this.data : '-'}</p>
      </div>`;
        }
        return html `
      <sl-input
        id=${this.id}
        .disabled=${this.disabled}
        type="number"
        .size=${this.variant === 'small' ? 'small' : 'medium'}
        .min=${this.min}
        .max=${this.max}
        ?required=${this.required}
        label=${this.label}
        @sl-input=${this.handleInput}
        value=${this.data >= Number(this.min || 0) ? this.data : ''}
        placeholder=${this.placeholder}
        autocomplete=${this.autocomplete ? 'on' : 'off'}
      ></sl-input>
    `;
    }
};
__decorate([
    property({ type: Number })
], MbCount.prototype, "data", void 0);
__decorate([
    property({ type: String })
], MbCount.prototype, "label", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbCount.prototype, "placeholder", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbCount.prototype, "id", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbCount.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbCount.prototype, "autocomplete", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbCount.prototype, "disabled", void 0);
__decorate([
    property({ type: Number, reflect: true })
], MbCount.prototype, "max", void 0);
__decorate([
    property({ type: Number, reflect: true })
], MbCount.prototype, "min", void 0);
__decorate([
    event('mb-input')
], MbCount.prototype, "_mbInput", void 0);
MbCount = __decorate([
    customElement('mb-count')
], MbCount);
export default MbCount;
