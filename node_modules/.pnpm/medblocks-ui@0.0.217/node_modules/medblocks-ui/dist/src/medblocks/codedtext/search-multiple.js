var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, html, property, state, css } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/spinner/spinner';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import '@shoelace-style/shoelace/dist/components/tag/tag';
import MbSearchAbstract from './abstractSearch';
let MbSearchMultiple = class MbSearchMultiple extends MbSearchAbstract {
    constructor() {
        super(...arguments);
        this.multiple = true;
        this.value = {};
    }
    _handleSelect(data) {
        if (data.text) {
            this.value = data.text;
        }
        else {
            this.value = {
                code: data.code,
                value: data.value,
                terminology: data.terminology,
            };
        }
        if (this.data == null) {
            this.data = [];
        }
        this.data = [...this.data, this.value];
        this.value = {};
        this.searchTerm = '';
        this._mbInput.emit();
    }
    get _hasValue() {
        var _a, _b;
        return !!(((_a = this === null || this === void 0 ? void 0 : this.value) === null || _a === void 0 ? void 0 : _a.value) && ((_b = this === null || this === void 0 ? void 0 : this.value) === null || _b === void 0 ? void 0 : _b.code));
    }
    get _display() {
        var _a;
        return this._hasValue ? (_a = this.value) === null || _a === void 0 ? void 0 : _a.value : undefined;
    }
    get _code() {
        var _a;
        return this._hasValue ? (_a = this.value) === null || _a === void 0 ? void 0 : _a.code : undefined;
    }
    handleClear(tagIndex) {
        if (!this.disabled) {
            this.data = this.data.filter((_, i) => i !== tagIndex);
            this._mbInput.emit();
        }
    }
    render() {
        var _a, _b;
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <p>
          ${Array.isArray(this === null || this === void 0 ? void 0 : this.data)
                ? (_a = this.data) === null || _a === void 0 ? void 0 : _a.map((item) => this.getDisplay(item)).join(', ')
                : ''}
        </p>
      </div>`;
        }
        return html `
      ${this._searchBar()}
      <div>
        ${(_b = this.data) === null || _b === void 0 ? void 0 : _b.map((s, i) => html `<sl-tag
              variant=${typeof s === 'string' ? 'neutral' : 'primary'}
              size=${this.variant === 'small' ? 'small' : 'medium'}
              @sl-remove=${() => this.handleClear(i)}
              removable
              ><span>${typeof s === 'string' ? s : s.value}</span></sl-tag
            >`)}
      </div>
      <slot @slotchange=${this._handleChildChange}></slot>
    `;
    }
};
MbSearchMultiple.styles = css `
    :host,
    mb-dropdown {
      display: block;
    }
    sl-input.pointer::part(base) {
      cursor: default;
    }
    .tags {
      padding: var(--sl-spacing-2x-small) var(--sl-spacing-x-small);
    }
    .more {
      display: flex;
      justify-content: space-between;
      padding: var(--sl-spacing-3x-small) var(--sl-spacing-small);
    }
    .tags sl-tag {
      padding: var(--sl-spacing-2x-small);
    }
    .tag-container {
      display: flex;
      flex-wrap: wrap;
      width: 100%;
      margin-top: var(--sl-spacing-x-small);
    }
    sl-tag {
      margin: var(--sl-spacing-x-small) var(--sl-spacing-x-small) 0 0;
      max-width: 100%;
      --sl-tag-content-spacing: var(--sl-spacing-2x-small)
        var(--sl-spacing-2x-small);
    }
    sl-tag::part(base) {
      max-width: 100%;
      overflow-wrap: break-word;
      word-break: break-word;
      white-space: normal;
      height: auto;
      min-height: var(--sl-input-height-small);
      line-height: 1.5;
      cursor: pointer;
    }
    sl-tag::part(content) {
      overflow: hidden;
      text-overflow: ellipsis;
    }
  `;
__decorate([
    property({ type: Boolean })
], MbSearchMultiple.prototype, "multiple", void 0);
__decorate([
    state()
], MbSearchMultiple.prototype, "value", void 0);
MbSearchMultiple = __decorate([
    customElement('mb-search-multiple')
], MbSearchMultiple);
export default MbSearchMultiple;
