var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import SlDropdown from '@shoelace-style/shoelace/dist/components/dropdown/dropdown';
import { customElement, property } from 'lit-element';
let MbDropDown = class MbDropDown extends SlDropdown {
    handleTriggerClick() {
        console.log('trigger click triggered');
        if (this.open) {
        }
        else {
            this.show();
        }
    }
    handleTriggerKeyDown(event) {
        const menu = this.getMenu();
        const menuItems = menu
            ? [...menu.querySelectorAll('sl-menu-item')]
            : [];
        const firstMenuItem = menuItems[0];
        const lastMenuItem = menuItems[menuItems.length - 1];
        if (event.key === 'Escape') {
            this.focusOnTrigger();
            this.hide();
            return;
        }
        if (['Enter'].includes(event.key)) {
            event.preventDefault();
            this.handleTriggerClick();
            return;
        }
        if (['ArrowDown', 'ArrowUp'].includes(event.key)) {
            event.preventDefault();
            if (!this.open) {
                this.show();
            }
            if (event.key === 'ArrowDown' && firstMenuItem) {
                menu === null || menu === void 0 ? void 0 : menu.setCurrentItem(firstMenuItem);
                firstMenuItem.focus();
                return;
            }
            if (event.key === 'ArrowUp' && lastMenuItem) {
                menu === null || menu === void 0 ? void 0 : menu.setCurrentItem(lastMenuItem);
                lastMenuItem.focus();
            }
        }
    }
};
__decorate([
    property()
], MbDropDown.prototype, "searchElement", void 0);
MbDropDown = __decorate([
    customElement('mb-dropdown')
], MbDropDown);
export default MbDropDown;
