var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, property, state } from 'lit-element';
import { html } from 'lit-html';
import { ifDefined } from 'lit-html/directives/if-defined';
import '@shoelace-style/shoelace/dist/components/menu/menu';
import '@shoelace-style/shoelace/dist/components/select/select';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import '@shoelace-style/shoelace/dist/components/menu-item/menu-item';
import '@shoelace-style/shoelace/dist/components/icon-button/icon-button';
import EhrElement from '../EhrElement';
let MbTextSelect = class MbTextSelect extends EhrElement {
    constructor() {
        super(...arguments);
        this.multiple = false;
        this.required = false;
        this.hoist = false;
        this.id = 'text_select';
        this._options = [];
    }
    get _optionElements() {
        return this.querySelectorAll('mb-option');
    }
    handleInput(e) {
        const select = e.target;
        if (select.value) {
            this.data = select.value;
            this._mbInput.emit();
        }
    }
    connectedCallback() {
        super.connectedCallback();
        const observer = new MutationObserver(() => {
            this.handleChildChange();
        });
        observer.observe(this, { childList: true });
        this.handleChildChange();
    }
    handleChildChange() {
        this._options = [
            ...this.querySelectorAll('mb-option'),
        ];
    }
    reportValidity() {
        var _a;
        const select = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('sl-select');
        return select.reportValidity();
    }
    render() {
        var _a;
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <p>${this.data || '-'}</p>
      </div> `;
        }
        return html `
      <sl-select
        id=${this.id}
        exportparts="menu"
        .size=${this.variant === 'small' ? 'small' : 'medium'}
        .clearable=${!this.nonclearable}
        .disabled=${this.disabled}
        ?required=${this.required}
        ?multiple=${this.multiple}
        placeholder=${(_a = this.placeholder) !== null && _a !== void 0 ? _a : 'Please select'}
        label=${ifDefined(this.label)}
        @sl-change=${this.handleInput}
        @sl-clear=${() => {
            this.data = undefined;
            this._mbInput.emit();
        }}
        .hoist=${this.hoist}
        .value=${this.data || ''}
      >
        ${this._options.map(option => html `<sl-menu-item
              .value=${option.value}
              id=${`${this.id}-${option.label}`}
              >${option.display || option.label}
            </sl-menu-item>`)}
      </sl-select>
      <slot @slotchange=${this.handleChildChange}></slot>
    `;
    }
};
__decorate([
    property({ type: Object })
], MbTextSelect.prototype, "data", void 0);
__decorate([
    property({ type: String })
], MbTextSelect.prototype, "terminology", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbTextSelect.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbTextSelect.prototype, "multiple", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbTextSelect.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbTextSelect.prototype, "hoist", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbTextSelect.prototype, "nonclearable", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbTextSelect.prototype, "placeholder", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbTextSelect.prototype, "id", void 0);
__decorate([
    state()
], MbTextSelect.prototype, "_options", void 0);
MbTextSelect = __decorate([
    customElement('mb-text-select')
], MbTextSelect);
export default MbTextSelect;
