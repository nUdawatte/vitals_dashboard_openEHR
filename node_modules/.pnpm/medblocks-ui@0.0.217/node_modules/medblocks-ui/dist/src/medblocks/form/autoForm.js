var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, customElement, html, LitElement, property } from 'lit-element';
import { bindRepeatables, createAutoFormByTemplateId, } from './autoform-utils';
import { watch } from '../../internal/decorators';
let MedblocksAutoForm = class MedblocksAutoForm extends LitElement {
    constructor() {
        super(...arguments);
        this.templateId = '';
        this.ctx = {};
        this.config = {};
        this.webTemplate = undefined;
        this.variant = 'small';
        this.addContext = false;
    }
    handleInput(event) {
        this.dispatchEvent(new CustomEvent('mb-input', {
            detail: event.detail,
            bubbles: true,
            composed: true,
        }));
    }
    firstUpdated() {
        this.generateAutoForm();
    }
    generateAutoForm() {
        if (this.webTemplate) {
            try {
                createAutoFormByTemplateId(this.webTemplate, this.handleSearch, this.config, this.addContext);
            }
            catch (error) {
                console.error('Error generating auto form:', error);
            }
        }
    }
    import(composition) {
        this.bindValue(composition);
    }
    clear() {
        this.bindValue({});
    }
    bindValue(composition) {
        const mbForm = this.renderRoot.querySelector('mb-form');
        mbForm.data = {};
        const container = mbForm.querySelector('#autoForm');
        const formNode = container.children[1];
        const mbRepeatables = [
            ...formNode.querySelectorAll('mb-repeatable-headless'),
        ];
        bindRepeatables(mbRepeatables, mbRepeatables, formNode, composition, this.handleSearch, this.config);
        setTimeout(() => {
            mbForm.import(composition);
        }, 10);
    }
    export() {
        return this.submit();
    }
    submit() {
        const mbForm = this.renderRoot.querySelector('mb-form');
        if (mbForm.validate()) {
            mbForm.insertContext();
            return mbForm.serialize();
        }
    }
    render() {
        return html `
      <mb-form
        variant=${this.variant}
        templateId=${this.templateId}
        .ctx=${this.ctx}
        overwritectx
        @mb-input=${this.handleInput}
        .handleSearch=${this.handleSearch}
      >
        <div id="autoForm"></div>
      </mb-form>
    `;
    }
};
MedblocksAutoForm.styles = css `
    :host {
      display: block;
      width: 100%;
    }
    #autoForm {
      padding: 0.5rem;
    }
    .flex {
      display: flex;
    }
    .justify-end {
      justify-content: flex-end;
    }
    .hidden {
      display: none;
    }
    .addButton {
      display: flex;
      margin: 8px;
    }
    .deleteButton {
      margin: 8px 8px 8px 0px;
    }
    .leaf-child {
      padding: 0px 16px 8px;
    }
    .heading {
      font-family: system-ui;
      margin: 8px;
      border-radius: 8px;
      border: 2px solid #e2e8f0;
    }
    margin-bottom-4 : {
      margin-bottom: 16px;
    }
    .p-depth {
      margin: -2px;
      border-top-left-radius: 6px;
      border-top-right-radius: 6px;
      font-size: 14px;
      font-weight: 600;
      line-height: 20px;
      padding: 8px 12px;
      margin-bottom: 8px;
      color: white;
    }
    .bg-slate-700 {
      background-color: #334155;
    }
    .bg-slate-600 {
      background-color: #475569;
    }
    .bg-slate-500 {
      background-color: #64748b;
    }
    .bg-slate-400 {
      background-color: #94a3b8;
    }
  `;
__decorate([
    property({ type: String, reflect: true })
], MedblocksAutoForm.prototype, "templateId", void 0);
__decorate([
    property({ type: Object })
], MedblocksAutoForm.prototype, "ctx", void 0);
__decorate([
    property({ type: Object })
], MedblocksAutoForm.prototype, "config", void 0);
__decorate([
    property({ type: Object })
], MedblocksAutoForm.prototype, "webTemplate", void 0);
__decorate([
    property({ type: String, reflect: true })
], MedblocksAutoForm.prototype, "variant", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MedblocksAutoForm.prototype, "addContext", void 0);
__decorate([
    property({ type: Function })
], MedblocksAutoForm.prototype, "handleSearch", void 0);
__decorate([
    watch('webTemplate')
], MedblocksAutoForm.prototype, "generateAutoForm", null);
MedblocksAutoForm = __decorate([
    customElement('mb-auto-form')
], MedblocksAutoForm);
export { MedblocksAutoForm };
