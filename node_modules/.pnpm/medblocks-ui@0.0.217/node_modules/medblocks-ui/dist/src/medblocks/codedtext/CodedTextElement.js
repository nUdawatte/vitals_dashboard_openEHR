var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { property } from 'lit-element';
import { event } from '../../internal/decorators';
import EhrElement from '../EhrElement';
export class CodedTextElement extends EhrElement {
    constructor() {
        super(...arguments);
        this.terminology = 'local';
        this.value = '';
    }
    getDisplay(value) {
        if (typeof value === 'string') {
            return value;
        }
        if (value === null || value === void 0 ? void 0 : value.value) {
            return value.value;
        }
        return '';
    }
}
__decorate([
    property({ type: Object })
], CodedTextElement.prototype, "data", void 0);
__decorate([
    property({ type: String })
], CodedTextElement.prototype, "terminology", void 0);
__decorate([
    property({ type: String })
], CodedTextElement.prototype, "value", void 0);
__decorate([
    event('mb-input')
], CodedTextElement.prototype, "_mbInput", void 0);
