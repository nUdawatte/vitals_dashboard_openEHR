var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, html, property, state, css } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/input/input';
import EhrElement from '../EhrElement';
let MbDuration = class MbDuration extends EhrElement {
    constructor() {
        super(...arguments);
        this.year = false;
        this.month = false;
        this.week = false;
        this.day = false;
        this.hour = false;
        this.minute = false;
        this.second = false;
        this.required = false;
        this.autocomplete = false;
        this.hidelabel = false;
        this.min = '1';
        this.placeholder = '';
        this.id = 'duration';
        this._state = {};
    }
    parsePeriod(period) {
        if (period) {
            const [periodPart, t] = period.split('T');
            const p = periodPart.replace('P', '');
            this._state.year = this.getPart(p, 'Y');
            this._state.month = this.getPart(p, 'M');
            this._state.week = this.getPart(p, 'W');
            this._state.day = this.getPart(p, 'D');
            if (t) {
                this._state.hour = this.getPart(t, 'H');
                this._state.minute = this.getPart(t, 'M');
                this._state.second = this.getPart(t, 'S');
            }
        }
    }
    getPart(periodPart, part) {
        const myRegexp = new RegExp(`(\\d+)${part}`, 'g');
        const match = myRegexp.exec(periodPart);
        return match ? match[1] : undefined;
    }
    serializePeriod() {
        const hour = this._state.hour ? `${this._state.hour}H` : '';
        const minute = this._state.minute ? `${this._state.minute}M` : '';
        const second = this._state.second ? `${this._state.second}S` : '';
        const t = [hour, minute, second].join('');
        const year = this._state.year ? `${this._state.year}Y` : '';
        const month = this._state.month ? `${this._state.month}M` : '';
        const week = this._state.week ? `${this._state.week}W` : '';
        const day = this._state.day ? `${this._state.day}D` : '';
        const p = [year, month, week, day].join('');
        const timePart = t ? `T${t}` : '';
        const periodPart = p ? `P${p}` : '';
        if (!periodPart && !timePart)
            return undefined;
        if (!periodPart && timePart)
            return `P${timePart}`;
        return `${periodPart}${timePart}`;
    }
    get data() {
        return this.serializePeriod();
    }
    set data(period) {
        const oldVal = this.data;
        this.parsePeriod(period);
        this.requestUpdate('data', oldVal);
    }
    handleInput(value, e) {
        const oldVal = this.data;
        const target = e.target;
        this._state = Object.assign(Object.assign({}, this._state), { [value]: target.value });
        this.requestUpdate('data', oldVal);
        this._mbInput.emit();
    }
    formatDuration(value) {
        return `${value.charAt(0).toUpperCase() + value.slice(1)}s`;
    }
    reportValidity() {
        var _a;
        const input = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('sl-input');
        return input.reportValidity();
    }
    getInputs() {
        const allDurations = {
            year: this.year,
            month: this.month,
            week: this.week,
            day: this.day,
            hour: this.hour,
            minute: this.minute,
            second: this.second,
        };
        const durationKeys = Object.keys(allDurations);
        const toRender = durationKeys.every(a => allDurations[a] === false)
            ? durationKeys
            : durationKeys.filter(a => allDurations[a]);
        return toRender.map(a => html `<sl-input
        .disabled=${this.disabled}
        .size=${this.variant === 'small' ? 'small' : 'medium'}
        id=${`${this.id}-${this.formatDuration(a)}`}
        type="number"
        .min=${this.min}
        ?required=${this.required}
        placeholder=${this.placeholder}
        help-text=${this.hidelabel ? '' : this.formatDuration(a)}
        .value=${this._state[a] || ''}
        @sl-input=${(e) => this.handleInput(a, e)}
        autocomplete=${this.autocomplete ? 'on' : 'off'}
      ></sl-input>`);
    }
    render() {
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <div style="display:flex">
          <p>${this._state.day ? this._state.day : '-'}</p>
        </div>
      </div>`;
        }
        return html `
      ${this.label
            ? html `<label
            part="label"
            class=${this.variant === 'small' ? 'label-s' : 'label'}
            >${this.label}</label
          >`
            : null}
      <div class="duration">${this.getInputs()}</div>
      <p class="print-only">${this._state.day || '-'}</p>
    `;
    }
};
MbDuration.styles = css `
    .duration {
      display: flex;
      gap: 10px;
    }
    .label {
      font-size: var(--sl-input-label-font-size-medium);
      display: inline-block;
      color: var(--sl-input-label-color);
      margin-bottom: var(--sl-spacing-xxx-small);
    }
    .label-s {
      font-size: var(--sl-input-label-font-size-small);
      display: inline-block;
      color: var(--sl-input-label-color);
      margin-bottom: var(--sl-spacing-xxx-small);
    }
    sl-input {
      width: 0;
      flex: 1 1 auto;
    }

    .print-only {
      display: none;
    }

    @media print {
      .print-only {
        display: inline-block;
        margin: 0px;
        padding: 2px;
      }
      .label {
        display: none;
      }
      .label-s {
        display: none;
      }
      .duration {
        display: none;
      }
    }
  `;
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "year", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "month", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "week", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "day", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "hour", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "minute", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "second", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "autocomplete", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDuration.prototype, "hidelabel", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbDuration.prototype, "min", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbDuration.prototype, "placeholder", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbDuration.prototype, "id", void 0);
__decorate([
    state()
], MbDuration.prototype, "_state", void 0);
MbDuration = __decorate([
    customElement('mb-duration')
], MbDuration);
export default MbDuration;
