var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, property, html, state, css } from 'lit-element';
import EhrElement from '../EhrElement';
import '@shoelace-style/shoelace/dist/components/input/input';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import '@shoelace-style/shoelace/dist/components/tag/tag';
let MbInputMultiple = class MbInputMultiple extends EhrElement {
    constructor() {
        super(...arguments);
        this.data = [];
        this.multiple = true;
        this.hidehelp = false;
        this.placeholder = '';
        this.id = 'input_multiple';
        this.required = false;
        this.autocomplete = false;
        this.value = '';
    }
    handleClear(tagIndex) {
        if (!this.disabled) {
            this.data = this.data.filter((_, i) => i !== tagIndex);
            this._mbInput.emit();
        }
    }
    handleInput(e) {
        const target = e.target;
        this.value = target.value;
    }
    addValue() {
        if (this.value !== '') {
            this.data = [...this.data, this.value];
            this.value = '';
            this._mbInput.emit();
        }
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('keypress', event => {
            if (event.key === 'Enter') {
                this.addValue();
            }
        });
    }
    disconnectedCallback() {
        this.removeEventListener('keypress', event => {
            if (event.key === 'Enter') {
                this.addValue();
            }
        });
        super.disconnectedCallback();
    }
    reportValidity() {
        var _a;
        const input = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('sl-input');
        if (this.data.length > 0) {
            return true;
        }
        return input.reportValidity();
    }
    render() {
        var _a, _b;
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <p>${((_a = this.data) === null || _a === void 0 ? void 0 : _a.join(', ')) || '-'}</p>
      </div>`;
        }
        return html `
      <div class="input-container">
        <sl-input
          id=${this.id}
          .size=${this.variant === 'small' ? 'small' : 'medium'}
          .disabled=${this.disabled}
          ?required=${this.required}
          help-text=${this.hidehelp
            ? ''
            : `Press enter to add ${this.placeholder}`}
          @sl-input=${this.handleInput}
          label=${this.label || ''}
          .value=${this.value}
          @sl-blur=${() => this.addValue()}
          autocomplete=${this.autocomplete ? 'on' : 'off'}
        >
          ${this.value &&
            html `<sl-icon @click=${this.addValue} library="medblocks" name="arrow-right-circle" slot="suffix"></sl-icon>
                </sl-icon>`}
        </sl-input>
      </div>
      <div class="tag-container">
        ${(_b = this.data) === null || _b === void 0 ? void 0 : _b.map((s, i) => html `<sl-tag
              id=${`${this.id}_tag${i}`}
              variant="neutral"
              size=${this.variant === 'small' ? 'small' : 'medium'}
              @sl-remove=${() => this.handleClear(i)}
              removable
              ><span>${s}</span></sl-tag
            >`)}
      </div>
      <p class="print-only">
        <span>${this.data.join(', ') || '-'}</span>
      </p>
    `;
    }
};
MbInputMultiple.styles = css `
    :host {
      display: block;
      width: 100%;
    }
    .input-container {
      width: 100%;
    }
    .tag-container {
      display: flex;
      flex-wrap: wrap;
      width: 100%;
    }
    sl-tag {
      margin: var(--sl-spacing-x-small) var(--sl-spacing-x-small) 0 0;
      max-width: 100%;
      --sl-tag-content-spacing: var(--sl-spacing-2x-small)
        var(--sl-spacing-2x-small);
    }
    sl-tag::part(base) {
      max-width: 100%;
      overflow-wrap: break-word;
      word-break: break-word;
      white-space: normal;
      height: auto;
      min-height: var(--sl-input-height-small);
      line-height: 1.5;
    }
    sl-tag::part(content) {
      overflow: hidden;
      text-overflow: ellipsis;
    }
    sl-icon {
      font-size: var(--sl-font-size-large);
      cursor: pointer;
    }

    .print-only {
      display: none;
    }

    @media print {
      sl-tag {
        display: none;
      }

      sl-input {
        display: none;
      }
      .print-only {
        display: inline-block;
        margin: 0px;
        padding: 2px;
      }
    }
  `;
__decorate([
    property({ type: Array })
], MbInputMultiple.prototype, "data", void 0);
__decorate([
    property({ type: Boolean })
], MbInputMultiple.prototype, "multiple", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbInputMultiple.prototype, "hidehelp", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbInputMultiple.prototype, "placeholder", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbInputMultiple.prototype, "id", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbInputMultiple.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbInputMultiple.prototype, "autocomplete", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbInputMultiple.prototype, "disabled", void 0);
__decorate([
    state()
], MbInputMultiple.prototype, "value", void 0);
MbInputMultiple = __decorate([
    customElement('mb-input-multiple')
], MbInputMultiple);
export default MbInputMultiple;
