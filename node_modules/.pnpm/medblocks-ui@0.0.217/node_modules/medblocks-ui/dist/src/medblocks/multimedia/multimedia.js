var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, html, property } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/input/input';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import { supabaseStoragePlugin } from './mediaFunction';
import EhrElement from '../EhrElement';
import { watch } from '../../internal/decorators';
let MbMultimedia = class MbMultimedia extends EhrElement {
    constructor() {
        super(...arguments);
        this.data = undefined;
        this.label = '';
        this.parentAxiosKey = 'storage-api';
        this.required = false;
        this.loading = false;
        this.base64 = false;
        this.plugin = {
            storageAPI: supabaseStoragePlugin,
        };
    }
    get _parentAxios() {
        const dependencyEvent = this._mbDependency.emit({
            detail: { key: this.parentAxiosKey },
        });
        return dependencyEvent.detail.value;
    }
    async _handleChange(e) {
        var _a, _b;
        const element = e.target;
        const file = (_a = element.files) === null || _a === void 0 ? void 0 : _a[0];
        if (((_b = e.target) === null || _b === void 0 ? void 0 : _b.value) === '') {
            this.data = undefined;
        }
        else if (file) {
            if (this.base64) {
                const reader = new FileReader();
                let base64Data = '';
                reader.onload = event => {
                    var _a;
                    base64Data = (_a = event.target) === null || _a === void 0 ? void 0 : _a.result;
                    this.data = {
                        data: base64Data,
                        mediatype: file === null || file === void 0 ? void 0 : file.type,
                        alternatetext: file === null || file === void 0 ? void 0 : file.name,
                        size: file === null || file === void 0 ? void 0 : file.size,
                    };
                };
                reader.readAsDataURL(file);
            }
            else {
                const axios = this.axios ? this.axios : this._parentAxios;
                this.loading = true;
                const output = await this.plugin.storageAPI.upload({ axios, file });
                this.data = {
                    _root: `s3:///${output}`,
                    mediatype: file === null || file === void 0 ? void 0 : file.type,
                    alternatetext: file === null || file === void 0 ? void 0 : file.name,
                    size: file === null || file === void 0 ? void 0 : file.size,
                };
                this.handleInput();
                this.loading = false;
            }
        }
        this._mbInput.emit();
    }
    async handleInput() {
        var _a, _b, _c;
        this.loading = true;
        if (this.base64) {
            this.src = (_a = this.data) === null || _a === void 0 ? void 0 : _a.data;
        }
        else {
            try {
                const axios = this.axios ? this.axios : this._parentAxios;
                const downloadedFile = await this.plugin.storageAPI.download({
                    axios,
                    key: (_c = (_b = this.data) === null || _b === void 0 ? void 0 : _b._root) === null || _c === void 0 ? void 0 : _c.split('///')[1],
                });
                this.src = downloadedFile;
            }
            catch (e) {
                this.src = '';
            }
        }
        this.loading = false;
    }
    getSrc() {
        this.handleInput();
    }
    render() {
        var _a;
        return html `
      <p>
        <input
          type="file"
          accept="image/*"
          name="image"
          id="file"
          label=${this.label}
          @change=${this._handleChange}
        />
      </p>
      ${((_a = this.data) === null || _a === void 0 ? void 0 : _a.alternatetext) || ''}
      ${this.loading
            ? html ` <p>
            <img
              alt=""
              width="200"
              src="https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif"
            />
          </p>`
            : html ` <p><img alt="" width="200" src=${this.src || ''} /></p> `}
    `;
    }
};
__decorate([
    property({ type: Object })
], MbMultimedia.prototype, "data", void 0);
__decorate([
    property({ type: String })
], MbMultimedia.prototype, "src", void 0);
__decorate([
    property({ type: String })
], MbMultimedia.prototype, "label", void 0);
__decorate([
    property({ type: String })
], MbMultimedia.prototype, "parentAxiosKey", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbMultimedia.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbMultimedia.prototype, "loading", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbMultimedia.prototype, "base64", void 0);
__decorate([
    property({ type: Object })
], MbMultimedia.prototype, "axios", void 0);
__decorate([
    property({ type: Object })
], MbMultimedia.prototype, "plugin", void 0);
__decorate([
    watch('data')
], MbMultimedia.prototype, "getSrc", null);
MbMultimedia = __decorate([
    customElement('mb-multimedia')
], MbMultimedia);
export default MbMultimedia;
