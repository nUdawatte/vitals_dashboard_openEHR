import { type TemplateResult } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/spinner/spinner';
import '@shoelace-style/shoelace/dist/components/menu/menu';
import '@shoelace-style/shoelace/dist/components/menu-item/menu-item';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import '@shoelace-style/shoelace/dist/components/tag/tag';
import '@shoelace-style/shoelace/dist/components/icon-button/icon-button';
import '@shoelace-style/shoelace/dist/components/divider/divider';
import '@shoelace-style/shoelace/dist/components/menu-label/menu-label';
import '@shoelace-style/shoelace/dist/components/skeleton/skeleton';
import type SlMenuItem from '@shoelace-style/shoelace/dist/components/menu-item/menu-item';
import type { InternalSearchResult, SearchOptions, SearchResult } from './searchFunctions';
import { CodedTextElement } from './CodedTextElement';
import type MbFilter from './filter';
import type SlDropdown from './dropdown';
import { type EventEmitter } from '../../internal/decorators';
import './dropdown';
export default abstract class MbSearchAbstract extends CodedTextElement {
    static styles: import("lit-element").CSSResult;
    searchTerm: string;
    show: boolean;
    _filters: MbFilter[];
    _cancelledFilters: string[];
    mock: string[];
    debounceInterval: number;
    hits: number;
    placeholder: string;
    id: string;
    textFallbackLabel: string;
    filtersLabel: string;
    errorMessage: string;
    disablefallback: boolean;
    disablesearch: boolean;
    required: boolean;
    hoist: boolean;
    fixfilters: boolean;
    disabled: boolean;
    filterType: 'or' | 'and';
    _moreHits: number;
    _debouncing: boolean;
    _debounceTimeout: number;
    get _maxHits(): number;
    _searchTermChange(): void;
    _mbSearch: EventEmitter<SearchOptions>;
    dropdown: SlDropdown;
    _handleInput(e: CustomEvent): void;
    _emitSearchEvent(): void;
    get _selectedFilters(): string[];
    get _viewMore(): TemplateResult;
    transformResult(result: SearchResult): InternalSearchResult;
    getResults(): Promise<{
        result: TemplateResult[];
        error?: string;
    }>;
    _results(): Promise<TemplateResult | TemplateResult[] | undefined>;
    _textFallback(): TemplateResult;
    _loadingResults(): TemplateResult;
    abstract _handleSelect(data: InternalSearchResult, menuItem: SlMenuItem): void;
    _handleSlSelect(e: CustomEvent): void;
    _handleMouseDown(ev: MouseEvent): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _handleChildChange(): void;
    _handleClear(): void;
    _handleFilterClick(tag: MbFilter, tags: MbFilter[]): void;
    reportValidity(): boolean;
    _showResults(): boolean;
    _searchBar(): TemplateResult;
    get _hasValue(): boolean;
    get _display(): any;
    get _code(): any;
}
