var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, html, property, css } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/input/input';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import '@shoelace-style/shoelace/dist/components/textarea/textarea';
import { event } from '../../internal/decorators';
import EhrElement from '../EhrElement';
let MbInput = class MbInput extends EhrElement {
    constructor() {
        super(...arguments);
        this.textarea = false;
        this.label = '';
        this.id = 'input';
        this.required = false;
        this.placeholder = '';
        this.autocomplete = false;
        this.rows = '3';
        this.resize = 'auto';
    }
    handleInput(e) {
        const inputElement = e.target;
        this.data = inputElement.value ? inputElement.value : undefined;
        this._mbInput.emit();
    }
    reportValidity() {
        var _a, _b;
        let input = null;
        if (this.textarea) {
            input = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('sl-textarea');
        }
        else {
            input = (_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('sl-input');
        }
        return input.reportValidity();
    }
    render() {
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <p>${this.data || '-'}</p>
      </div>`;
        }
        return this.textarea
            ? html `
          <sl-textarea
            id=${this.id}
            .size=${this.variant === 'small' ? 'small' : 'medium'}
            .disabled=${this.disabled}
            .maxlength=${this.maxlength}
            .minlength=${this.minlength}
            ?required=${this.required}
            label=${this.label}
            placeholder=${this.placeholder}
            @sl-input=${this.handleInput}
            value=${this.data || ''}
            rows=${this.rows}
            resize=${this.resize}
            autocomplete=${this.autocomplete ? 'on' : 'off'}
          ></sl-textarea>
          <p class="print-only">${this.data || '-'}</p>
        `
            : html `
          <sl-input
            id=${this.id}
            .size=${this.variant === 'small' ? 'small' : 'medium'}
            .disabled=${this.disabled}
            .min=${this.min}
            .max=${this.max}
            .maxlength=${this.maxlength}
            .minlength=${this.minlength}
            .type=${this.type}
            ?required=${this.required}
            label=${this.label}
            placeholder=${this.placeholder}
            @sl-input=${this.handleInput}
            value=${this.data || ''}
            autocomplete=${this.autocomplete ? 'on' : 'off'}
          ></sl-input>
          <p class="print-only">${this.data || '-'}</p>
        `;
    }
};
MbInput.styles = css `
    .print-only {
      display: none;
    }

    @media print {
      .print-only {
        display: inline-block;
        margin: 0px;
        padding: 2px;
      }

      sl-input {
        display: none;
      }
      sl-textarea {
        display: none;
      }
    }
  `;
__decorate([
    property({ type: String })
], MbInput.prototype, "data", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbInput.prototype, "textarea", void 0);
__decorate([
    property({ type: String })
], MbInput.prototype, "label", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbInput.prototype, "id", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbInput.prototype, "required", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbInput.prototype, "type", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbInput.prototype, "placeholder", void 0);
__decorate([
    property({ type: Number, reflect: true })
], MbInput.prototype, "min", void 0);
__decorate([
    property({ type: Number, reflect: true })
], MbInput.prototype, "max", void 0);
__decorate([
    property({ type: Number, reflect: true })
], MbInput.prototype, "minlength", void 0);
__decorate([
    property({ type: Number, reflect: true })
], MbInput.prototype, "maxlength", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbInput.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbInput.prototype, "autocomplete", void 0);
__decorate([
    property({ type: String })
], MbInput.prototype, "rows", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbInput.prototype, "resize", void 0);
__decorate([
    event('mb-input')
], MbInput.prototype, "_mbInput", void 0);
MbInput = __decorate([
    customElement('mb-input')
], MbInput);
export default MbInput;
