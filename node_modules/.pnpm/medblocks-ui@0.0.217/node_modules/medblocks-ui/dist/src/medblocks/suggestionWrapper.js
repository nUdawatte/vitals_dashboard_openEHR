var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, customElement, html, LitElement, property } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/tag/tag';
import { event } from '../internal/decorators';
let SuggestWrapper = class SuggestWrapper extends LitElement {
    constructor() {
        super(...arguments);
        this.suggestions = [];
        this.global = false;
        this.label = '';
    }
    _handleSuggestion(suggestion) {
        this._suggestionEvent.emit({
            detail: {
                suggestion,
                path: this.path,
                global: this.global,
            },
        });
    }
    render() {
        return html `
      <slot></slot>
      <div class="suggestions">
        ${this.suggestions.length > 0
            ? html `<span class="label">${this.label}</span>`
            : null}
        <div class="suggest-buttons">
          ${this.suggestions.map(suggestion => html `
              <sl-button
                id=${suggestion.label}
                @click=${() => this._handleSuggestion(suggestion)}
                size="small"
                pill
                removable
                >${suggestion.label}</sl-button
              >
            `)}
        </div>
      </div>
    `;
    }
};
SuggestWrapper.styles = css `
    .suggestions {
      display: block;
      flex-wrap: wrap;
      gap: var(--sl-spacing-2x-small);
      margin-top: var(--sl-spacing-2x-small);
    }

    .label {
      font-weight: var(--sl-font-weight-light);
      font-size: var(--sl-input-help-text-font-size-medium);
      color: var(--sl-input-help-text-color);
    }

    .suggest-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: var(--sl-spacing-2x-small);
      margin-top: var(--sl-spacing-2x-small);
    }

    sl-tag {
      cursor: pointer;
    }
  `;
__decorate([
    event('mb-suggestion')
], SuggestWrapper.prototype, "_suggestionEvent", void 0);
__decorate([
    property({ type: String, reflect: true })
], SuggestWrapper.prototype, "path", void 0);
__decorate([
    property({ type: Array })
], SuggestWrapper.prototype, "suggestions", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], SuggestWrapper.prototype, "global", void 0);
__decorate([
    property({ type: String, reflect: true })
], SuggestWrapper.prototype, "label", void 0);
SuggestWrapper = __decorate([
    customElement('mb-suggest')
], SuggestWrapper);
export default SuggestWrapper;
