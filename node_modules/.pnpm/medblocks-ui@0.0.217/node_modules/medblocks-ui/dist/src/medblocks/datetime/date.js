var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, customElement, html, property } from 'lit-element';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import { event } from '../../internal/decorators';
import EhrElement from '../EhrElement';
let MbDateTime = class MbDateTime extends EhrElement {
    constructor() {
        super(...arguments);
        this.label = '';
        this.max = '';
        this.min = '';
        this.time = false;
        this.dvdatetime = false;
        this.required = false;
        this.id = 'date';
    }
    handleInput(e) {
        const inputElement = e.target;
        if (this.time)
            this.data = inputElement.value
                ? new Date(inputElement.value).toISOString()
                : undefined;
        else if (this.dvdatetime)
            this.data = inputElement.value
                ? `${inputElement.value}T00:00:00Z`
                : undefined;
        else
            this.data = inputElement.value ? inputElement.value : undefined;
        this._mbInput.emit();
    }
    reportValidity() {
        var _a;
        const input = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('sl-input');
        return input.reportValidity();
    }
    getValue(data, isTime) {
        if (isTime && data) {
            const date = data.split('T')[0];
            const timeString = new Date(data).toTimeString();
            const time = timeString.slice(0, 5);
            return `${date}T${time}`;
        }
        if (!isTime && data) {
            return new Date(data).toISOString().split('T')[0];
        }
        return '';
    }
    getTextData(data) {
        const [date, time] = data.split('T');
        if (this.dvdatetime) {
            return date;
        }
        if (time) {
            const [hours, minutes] = time.split(':');
            return `${date} ${hours}:${minutes}`;
        }
        return date;
    }
    render() {
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <div style="display:flex;">
          <p>${this.data ? this.getTextData(this.data) : '-'}</p>
        </div>
      </div>`;
        }
        return html `
      <sl-input
        id=${this.id}
        part="sl-input"
        class=${this.data ? '' : 'placeholder'}
        .size=${this.variant === 'small' ? 'small' : 'medium'}
        .disabled=${this.disabled}
        ?required=${this.required}
        .max=${this.max}
        .min=${this.min}
        type="${this.time ? 'datetime-local' : 'date'}"
        label=${this.label}
        @sl-input=${this.handleInput}
        value=${this.getValue(this.data, this.time) || ''}
      >
      </sl-input>
    `;
    }
};
MbDateTime.styles = css `
    sl-input::part(base) {
      width: unset;
    }
    .placeholder::part(input) {
      color: var(--sl-input-placeholder-color);
    }
  `;
__decorate([
    property({ type: String })
], MbDateTime.prototype, "data", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbDateTime.prototype, "label", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbDateTime.prototype, "max", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbDateTime.prototype, "min", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDateTime.prototype, "time", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDateTime.prototype, "dvdatetime", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDateTime.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbDateTime.prototype, "disabled", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbDateTime.prototype, "id", void 0);
__decorate([
    event('mb-input')
], MbDateTime.prototype, "_mbInput", void 0);
MbDateTime = __decorate([
    customElement('mb-date')
], MbDateTime);
export default MbDateTime;
