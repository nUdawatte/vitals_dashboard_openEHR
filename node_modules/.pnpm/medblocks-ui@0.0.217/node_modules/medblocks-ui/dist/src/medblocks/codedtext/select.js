var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { customElement, property, state } from 'lit-element';
import { html } from 'lit-html';
import { ifDefined } from 'lit-html/directives/if-defined';
import { CodedTextElement } from './CodedTextElement';
import '@shoelace-style/shoelace/dist/components/menu/menu';
import '@shoelace-style/shoelace/dist/components/select/select';
import '@shoelace-style/shoelace/dist/components/icon/icon';
import '@shoelace-style/shoelace/dist/components/menu-item/menu-item';
import '@shoelace-style/shoelace/dist/components/icon-button/icon-button';
let MbSelect = class MbSelect extends CodedTextElement {
    constructor() {
        super(...arguments);
        this.placeholder = 'Please select';
        this.id = 'select';
        this.multiple = false;
        this.required = false;
        this.hoist = false;
        this._options = [];
    }
    getLabel(code) {
        return this._options.filter(option => option.value === code)[0].label;
    }
    getOrdinal(code) {
        var _a;
        return (((_a = this._options.filter(option => option.value === code)[0]) === null || _a === void 0 ? void 0 : _a.ordinal) ||
            undefined);
    }
    get _optionElements() {
        return this.querySelectorAll('mb-option');
    }
    handleInput(e) {
        const select = e.target;
        if (select.value && typeof select.value === 'object') {
            const data = select.value.map((item) => {
                let codedtext = {
                    code: item,
                    value: this.getLabel(item),
                    terminology: this.terminology,
                };
                const ordinal = this.getOrdinal(item);
                if (ordinal) {
                    codedtext = Object.assign(Object.assign({}, codedtext), { ordinal });
                }
                return codedtext;
            });
            if (JSON.stringify(this.data) !== JSON.stringify(data)) {
                this.data = data;
                this._mbInput.emit();
            }
        }
        else if (select.value && typeof select.value === 'string') {
            let data = {
                code: select.value,
                value: this.getLabel(select.value),
                terminology: this.terminology,
            };
            const ordinal = this.getOrdinal(select.value);
            if (ordinal) {
                data = Object.assign(Object.assign({}, data), { ordinal });
            }
            this.data = data;
            this._mbInput.emit();
        }
    }
    connectedCallback() {
        super.connectedCallback();
        const observer = new MutationObserver(() => {
            this.handleChildChange();
        });
        observer.observe(this, { childList: true });
        this.handleChildChange();
    }
    handleChildChange() {
        this._options = [
            ...this.querySelectorAll('mb-option'),
        ];
    }
    getValue(data) {
        if (data == null)
            return '';
        if (Array.isArray(data))
            return data.map(item => item.code || '');
        return (data === null || data === void 0 ? void 0 : data.code) || '';
    }
    reportValidity() {
        var _a;
        const select = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('sl-select');
        return select.reportValidity();
    }
    getTextData(data) {
        if (data == null)
            return '';
        if (Array.isArray(data))
            return (data === null || data === void 0 ? void 0 : data.map(item => item.value || '').join(', ')) || '';
        return (data === null || data === void 0 ? void 0 : data.value) || '';
    }
    render() {
        var _a;
        if (this.variant === 'text') {
            return html `<div>
        ${this._label()}
        <p>${this.getTextData(this.data) || '-'}</p>
      </div>`;
        }
        return html `
      <sl-select
        id=${this.id}
        .size=${this.variant === 'small' ? 'small' : 'medium'}
        .disabled=${this.disabled}
        .clearable=${!this.nonclearable}
        ?required=${this.required}
        ?multiple=${this.multiple}
        placeholder=${(_a = this.placeholder) !== null && _a !== void 0 ? _a : 'Please select'}
        label=${ifDefined(this.label)}
        @sl-change=${this.handleInput}
        @sl-clear=${() => {
            this.data = undefined;
            this._mbInput.emit();
        }}
        .hoist=${this.hoist}
        .value=${this.getValue(this.data)}
      >
        ${this._options.map(option => html `<sl-menu-item
              .value=${option.value}
              id=${`${this.id}-${option.value}`}
            >
              ${option.display || option.label}
            </sl-menu-item>`)}
      </sl-select>
      <slot @slotchange=${this.handleChildChange}></slot>
    `;
    }
};
__decorate([
    property({ type: String })
], MbSelect.prototype, "terminology", void 0);
__decorate([
    property({ type: Object })
], MbSelect.prototype, "data", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbSelect.prototype, "placeholder", void 0);
__decorate([
    property({ type: String, reflect: true })
], MbSelect.prototype, "id", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSelect.prototype, "multiple", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSelect.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSelect.prototype, "hoist", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSelect.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], MbSelect.prototype, "nonclearable", void 0);
__decorate([
    state()
], MbSelect.prototype, "_options", void 0);
MbSelect = __decorate([
    customElement('mb-select')
], MbSelect);
export default MbSelect;
