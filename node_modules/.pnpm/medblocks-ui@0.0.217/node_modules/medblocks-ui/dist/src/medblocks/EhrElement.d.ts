import { LitElement } from 'lit-element';
import { type EventEmitter } from '../internal/decorators';
import type MedblockForm from './form/form';
import type { SearchFunction } from './codedtext/searchFunctions';
export type Variant = 'small' | 'text' | 'normal';
export default abstract class EhrElement extends LitElement {
    path: string;
    label?: string;
    repeatprefix?: string;
    repeatsuffix?: string;
    variant: Variant;
    handleSearch: SearchFunction;
    mbForm: MedblockForm;
    abstract data: any;
    isMbElement: boolean;
    datatype?: string;
    _mbInput: EventEmitter<any>;
    reportValidity(): boolean;
    _mbDependency: EventEmitter<{
        key: string;
        value: any;
    }>;
    _pathChangeHandler: EventEmitter<{
        oldPath: string;
        newPath: string;
    }>;
    _mbConnect: EventEmitter<string>;
    _mbDisconnect: EventEmitter<string>;
    handlePathChange(oldPath: string, newPath: string): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _label(): import("lit-element").TemplateResult | undefined;
}
