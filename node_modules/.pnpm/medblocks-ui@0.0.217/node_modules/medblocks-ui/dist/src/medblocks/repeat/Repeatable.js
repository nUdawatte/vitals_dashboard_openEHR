var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, property } from 'lit-element';
import { event, watch } from '../../internal/decorators';
export function getRepeatableRegex(path) {
    return new RegExp(`(${path}):(\\d+)`, 'g');
}
export default class Repeatable extends LitElement {
    constructor() {
        super(...arguments);
        this.isRepeatable = true;
        this.count = 0;
    }
    get regex() {
        return getRepeatableRegex(this.path);
    }
    connectedCallback() {
        super.connectedCallback();
        this._mbConnectRepeatable.emit({ detail: this.path });
    }
    handleCountChange(_, newCount) {
        this._mbCount.emit({ detail: newCount });
    }
}
__decorate([
    property({ type: Number, reflect: true })
], Repeatable.prototype, "count", void 0);
__decorate([
    property({ type: String, reflect: true })
], Repeatable.prototype, "path", void 0);
__decorate([
    event('mb-count')
], Repeatable.prototype, "_mbCount", void 0);
__decorate([
    event('mb-connect-repeatable')
], Repeatable.prototype, "_mbConnectRepeatable", void 0);
__decorate([
    watch('count')
], Repeatable.prototype, "handleCountChange", null);
