const transformations = {
    DV_QUANTITY: n => {
        var _a, _b, _c, _d;
        return [
            {
                name: 'Quantity',
                html: `<mb-quantity default="${((_d = (_c = (_b = (_a = n === null || n === void 0 ? void 0 : n.inputs) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.list) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.value) || ''}" path="${n.path}" label="${n.name}">
                  ${n.inputs && n.inputs[1] && n.inputs[1].list
                    ? n.inputs[1].list
                        .map(unit => {
                        var _a, _b, _c, _d;
                        return `<mb-unit unit="${unit === null || unit === void 0 ? void 0 : unit.value}" label="${(unit === null || unit === void 0 ? void 0 : unit.label) || ''}" min="${((_b = (_a = unit === null || unit === void 0 ? void 0 : unit.validation) === null || _a === void 0 ? void 0 : _a.range) === null || _b === void 0 ? void 0 : _b.min) || ''}" max="${((_d = (_c = unit === null || unit === void 0 ? void 0 : unit.validation) === null || _c === void 0 ? void 0 : _c.range) === null || _d === void 0 ? void 0 : _d.max) || ''}"></mb-unit>`;
                    })
                        .join('\n')
                    : ''}
              </mb-quantity>`,
            },
        ];
    },
    DV_CODED_TEXT: n => {
        var _a, _b;
        let templates;
        if (n.max === -1) {
            templates = [
                {
                    name: 'Select-Multiple',
                    html: `<mb-select multiple path="${n.path.slice(0, n.path.length - 2)}" label="${n.name || ''}" terminology="${n.inputs[0].terminology || 'local'}">
              ${n.inputs && n.inputs[0] && n.inputs[0].list
                        ? n.inputs[0].list
                            .map(option => `<mb-option value="${option.value}" label="${option.label}"></mb-option>`)
                            .join('\n')
                        : ''}
            </mb-select>`,
                },
                {
                    name: 'Buttons-Multiple',
                    html: `<mb-buttons-multiple path="${n.path.slice(0, n.path.length - 2)}" label="${n.name || ''}" terminology="${n.inputs[0].terminology || 'local'}">
        ${n.inputs && n.inputs[0] && n.inputs[0].list
                        ? n.inputs[0].list
                            .map(option => `<mb-option value="${option.value}" label="${option.label}"></mb-option>`)
                            .join('\n')
                        : ''}
        </mb-buttons-multiple>`,
                },
                {
                    name: 'Search-Multiple',
                    html: `<mb-search-multiple disablefallback path="${n.path.slice(0, n.path.length - 2)}" label="${n.name || ''}" terminology="${n.inputs[0].terminology || ((_a = n === null || n === void 0 ? void 0 : n.annotations) === null || _a === void 0 ? void 0 : _a.MB_VALUESET) || 'local'}">
        </mb-search-multiple>`,
                },
            ];
        }
        else {
            templates = [
                {
                    name: 'Select',
                    html: `<mb-select path="${n.path}" label="${n.name || ''}" terminology="${n.inputs[0].terminology || 'local'}">
              ${n.inputs && n.inputs[0] && n.inputs[0].list
                        ? n.inputs[0].list
                            .map(option => `<mb-option value="${option.value}" label="${option.label}"></mb-option>`)
                            .join('\n')
                        : ''}
            </mb-select>`,
                },
                {
                    name: 'Buttons',
                    html: `<mb-buttons path="${n.path}" label="${n.name || ''}" terminology="${n.inputs[0].terminology || 'local'}">
        ${n.inputs && n.inputs[0] && n.inputs[0].list
                        ? n.inputs[0].list
                            .map(option => `<mb-option value="${option.value}" label="${option.label}"></mb-option>`)
                            .join('\n')
                        : ''}
        </mb-buttons>`,
                },
                {
                    name: 'Search',
                    html: `<mb-search disablefallback path="${n.path}" label="${n.name || ''}" terminology="${n.inputs[0].terminology || ((_b = n === null || n === void 0 ? void 0 : n.annotations) === null || _b === void 0 ? void 0 : _b.MB_VALUESET) || 'local'}">
        </mb-search>`,
                },
            ];
        }
        return templates;
    },
    DV_COUNT: n => [
        {
            name: 'Count',
            html: `<mb-count path="${n.path}" label="${n.name || ''}"
      min="${n.min}" max="${n.max}"></mb-count>`,
        },
    ],
    DV_PROPORTION: n => {
        var _a, _b;
        return [
            ...(((_a = n.proportionTypes) === null || _a === void 0 ? void 0 : _a.some((props) => props === 'percent'))
                ? [
                    {
                        name: 'Percent',
                        html: `<mb-proportion path="${n.path}" label="${n.name || ''}" min="0" max="100" step="1" type="percent"></mb-proportion>`,
                    },
                ]
                : []),
            ...(((_b = n.proportionTypes) === null || _b === void 0 ? void 0 : _b.some((props) => props === 'unitary'))
                ? [
                    {
                        name: 'Unitary',
                        html: `<mb-proportion path="${n.path}" label="${n.name || ''}" min="0" max="1" step="0.01"></mb-proportion>`,
                    },
                ]
                : []),
        ];
    },
    DV_TEXT: n => {
        var _a, _b, _c, _d;
        let templates;
        if (n.max === -1) {
            templates = [
                ...(((_a = n === null || n === void 0 ? void 0 : n.annotations) === null || _a === void 0 ? void 0 : _a.MB_VALUESET)
                    ? [
                        {
                            name: 'Search-Multiple',
                            html: `<mb-search-multiple path="${n.path.slice(0, n.path.length - 2)}" label="${n.name || ''}" terminology="${(_b = n === null || n === void 0 ? void 0 : n.annotations) === null || _b === void 0 ? void 0 : _b.MB_VALUESET}">
                </mb-search-multiple>`,
                        },
                    ]
                    : []),
                {
                    name: 'Input-Multiple',
                    html: `<mb-input-multiple path="${n.path.slice(0, n.path.length - 2)}" label="${n.name || ''}"></mb-input-multiple>`,
                },
                {
                    name: 'Text-Select-Multiple',
                    html: `<mb-text-select multiple path="${n.path.slice(0, n.path.length - 2)}" label="${n.name || ''}">
          ${n.inputs && n.inputs[0] && n.inputs[0].list
                        ? n.inputs[0].list
                            .map(option => `<mb-option value="${option.value}" label="${option.label}"></mb-option>`)
                            .join('\n')
                        : ''}
        </mb-text-select>`,
                },
            ];
        }
        else {
            templates = [
                ...(((_c = n === null || n === void 0 ? void 0 : n.annotations) === null || _c === void 0 ? void 0 : _c.MB_VALUESET)
                    ? [
                        {
                            name: 'Search',
                            html: `<mb-search path="${n.path}" label="${n.name || ''}" terminology="${(_d = n === null || n === void 0 ? void 0 : n.annotations) === null || _d === void 0 ? void 0 : _d.MB_VALUESET}">
            </mb-search>`,
                        },
                    ]
                    : []),
                {
                    name: 'Input',
                    html: `<mb-input path="${n.path}" label="${n.name || ''}"></mb-input>`,
                },
                {
                    name: 'Textarea',
                    html: `<mb-input textarea path="${n.path}" label="${n.name || ''}"></mb-input>`,
                },
                {
                    name: 'Text-Select',
                    html: `<mb-text-select path="${n.path}" label="${n.name || ''}">
              ${n.inputs && n.inputs[0] && n.inputs[0].list
                        ? n.inputs[0].list
                            .map(option => `<mb-option value="${option.value}" label="${option.label}"></mb-option>`)
                            .join('\n')
                        : ''}
            </mb-text-select>`,
                },
            ];
        }
        return templates;
    },
    DV_DURATION: n => {
        const suffixes = [];
        n.inputs.forEach(input => {
            if (input.suffix) {
                suffixes.push(input.suffix);
            }
        });
        return [
            {
                name: 'Duration',
                html: `<mb-duration ${suffixes.join(' ')} path="${n.path}" label="${n.name || ''}"></mb-duration>`,
            },
        ];
    },
    DV_DATE_TIME: n => [
        {
            name: 'Date & Time',
            html: `<mb-date time path="${n.path}" label="${n.name || ''}"></mb-date>`,
        },
        {
            name: 'Date',
            html: `<mb-date dvdatetime path="${n.path}" label="${n.name || ''}"></mb-date>`,
        },
    ],
    DV_DATE: n => [
        {
            name: 'Date',
            html: `<mb-date path="${n.path}" label="${n.name || ''}"></mb-date>`,
        },
    ],
    DV_BOOLEAN: n => [
        {
            name: 'Boolean',
            html: `<mb-checkbox path="${n.path}" label="${n.name || ''}"></mb-checkbox>`,
        },
    ],
    DV_MULTIMEDIA: n => [
        {
            name: 'Multimedia',
            html: `<mb-multimedia path="${n.path}" label="${n.name || ''}"></mb-multimedia>`,
        },
    ],
    DV_ORDINAL: n => [
        {
            name: 'Ordinal',
            html: `<mb-select path="${n.path}" label="${n.name || ''}" terminology="${n.inputs[0].terminology}">
        ${n.inputs && n.inputs[0] && n.inputs[0].list
                ? n.inputs[0].list
                    .map(option => `<mb-option value="${option.value}" label="${option.label}" ordinal="${option.ordinal}" ></mb-option>`)
                    .join('\n')
                : ''}</mb-select>`,
        },
        {
            name: 'Buttons',
            html: `<mb-buttons path="${n.path}" label="${n.name || ''}">
        ${n.inputs && n.inputs[0] && n.inputs[0].list
                ? n.inputs[0].list
                    .map(option => `<mb-option value="${option.value}" label="${option.label}" ordinal="${option.ordinal}"></mb-option>`)
                    .join('\n')
                : ''}
        </mb-buttons>`,
        },
    ],
    context: n => [
        { name: 'Context', html: `<mb-context path="${n.path}"></mb-context>` },
    ],
};
export default (leaf) => {
    if (leaf.inContext) {
        return transformations.context(leaf);
    }
    const fn = transformations[leaf.rmType];
    if (fn) {
        const nodes = fn(leaf);
        return nodes;
    }
    return [];
};
