type Operations = '>=' | '<=' | '>' | '<' | '=';
interface MinMax {
    minOp: Operations;
    min: number;
    maxOp: Operations;
    max: number;
}
interface ListItem {
    value: string;
    label: string;
    validation?: {
        range: MinMax;
    };
    ordinal?: number;
}
export interface Tree {
    id: string;
    name: string;
    min: number;
    max: number;
    aqlPath: string;
    rmType: string;
    localizedName?: string;
    nodeID?: string;
    inContext?: boolean;
    localizedNames?: {
        [key: string]: string;
    };
    localizedDescriptions?: {
        [key: string]: string;
    };
    annotations?: {
        [key: string]: string;
    };
    proportionTypes?: string[];
    children?: Tree[];
    inputs: {
        type: string;
        suffix?: string;
        validation?: {
            range: MinMax;
            precision: MinMax;
        };
        list?: ListItem[];
        defaultValue?: string;
        terminology?: string;
    }[];
    [other: string]: any;
    runtimeRegex?: string;
    regex?: string;
    snippet?: string;
    context?: string;
    status?: 'present' | 'optionalAbsent' | 'mandatoryAbsent' | 'allPresent';
}
export interface ProcessedTree extends Tree {
    path: string;
}
export type TransformFunction = (leaf: ProcessedTree) => {
    html: string;
    name: string;
}[];
declare const _default: (leaf: ProcessedTree) => {
    html: string;
    name: string;
}[];
export default _default;
